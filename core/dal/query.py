# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: query.sql
import uuid
from collections.abc import Iterator

import sqlalchemy

from core.dal import models

CREATE_USER = """-- name: create_user \\:one
INSERT INTO users (
    name,
    age
) VALUES (
    :p1, :p2
)
RETURNING id, name, age, created_at, updated_at
"""


DELETE_USER = """-- name: delete_user \\:exec
DELETE FROM users
WHERE id = :p1
"""


GET_USER_BY_ID = """-- name: get_user_by_id \\:one
SELECT id, name, age, created_at, updated_at FROM users
WHERE id = :p1 LIMIT 1
"""


LIST_USERS = """-- name: list_users \\:many
SELECT id, name, age, created_at, updated_at FROM users
ORDER BY created_at DESC
"""


UPDATE_USER = """-- name: update_user \\:one
UPDATE users
SET name = :p2,
    age = :p3
WHERE id = :p1
RETURNING id, name, age, created_at, updated_at
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_user(self, *, name: str, age: int) -> models.User | None:
        row = self._conn.execute(
            sqlalchemy.text(CREATE_USER), {"p1": name, "p2": age}
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            age=row[2],
            created_at=row[3],
            updated_at=row[4],
        )

    def delete_user(self, *, id: uuid.UUID) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_USER), {"p1": id})

    def get_user_by_id(self, *, id: uuid.UUID) -> models.User | None:
        row = self._conn.execute(sqlalchemy.text(GET_USER_BY_ID), {"p1": id}).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            age=row[2],
            created_at=row[3],
            updated_at=row[4],
        )

    def list_users(self) -> Iterator[models.User]:
        result = self._conn.execute(sqlalchemy.text(LIST_USERS))
        for row in result:
            yield models.User(
                id=row[0],
                name=row[1],
                age=row[2],
                created_at=row[3],
                updated_at=row[4],
            )

    def update_user(
        self, *, id: uuid.UUID, name: str, age: int
    ) -> models.User | None:
        row = self._conn.execute(
            sqlalchemy.text(UPDATE_USER), {"p1": id, "p2": name, "p3": age}
        ).first()
        if row is None:
            return None
        return models.User(
            id=row[0],
            name=row[1],
            age=row[2],
            created_at=row[3],
            updated_at=row[4],
        )
